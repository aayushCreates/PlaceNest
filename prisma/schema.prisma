generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===========================
 * ENUMS
 * ===========================
 */

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Branch {
  CS
  CY
  IT
  ME
  ECE
  EIC
  EE
  CE
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum JobType {
  Internship
  PartTime
  FullTime
  Contract
}

enum Role {
  STUDENT
  COORDINATOR
  COMPANY
  ADMIN
}

enum Year {
  FIRST
  SECOND
  THIRD
  FOURTH
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

/**
 * ===========================
 * MODELS
 * ===========================
 */

model User {
  id          String @id @default(uuid())
  name        String
  email       String @unique
  phone       String @unique
  password    String
  role        Role
  linkedinUrl String

  // Common verification
  verificationStatus VerificationStatus @default(PENDING)
  verifiedProfile    Boolean            @default(false)

  // Relations
  verifications            Verification[]
  coordinatorVerifications Verification[] @relation("CoordinatorVerification")

  // Student-specific
  branch         Branch?
  year           Year?
  cgpa           Decimal?  @db.Decimal(3, 2)
  activeBacklog  Boolean?
  backlogs       Int?
  resumeUrl      String?
  resumeScore    Int?
  aiFeedback     String?
  lastAnalyzedAt DateTime?

  applications Application[]

  // Company-specific
  industry    String?
  description String?
  website     String?
  founded     String?
  location    String?
  jobs        Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verification {
  id           String             @id @default(uuid())
  userId       String // student/company being verified
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  verifiedById String?
  verifiedBy   User?               @relation("CoordinatorVerification", fields: [verifiedById], references: [id], onDelete: Cascade)

  status       VerificationStatus @default(PENDING)
  remarks      String?
  createdAt    DateTime           @default(now())

  @@index([userId, verifiedById])
}

/**
 * ===========================
 * JOB MODEL
 * ===========================
 */

model Job {
  id          String    @id @default(uuid())
  type        JobType
  title       String
  description String
  position    String
  location    String
  salary      String
  deadline    DateTime
  status      JobStatus @default(ACTIVE)

  //  eligibility
  cgpaCutOff   Decimal  @db.Decimal(3, 2)
  branchCutOff Branch[]
  yearCutOff   Year[]

  companyId String
  company   User   @relation(fields: [companyId], references: [id])

  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([status, deadline, companyId])
}

/**
 * ===========================
 * APPLICATION MODEL
 * ===========================
 */

model Application {
  id      String            @id @default(uuid())
  status  ApplicationStatus @default(PENDING)
  remarks String?

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  studentId String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, studentId])
}
